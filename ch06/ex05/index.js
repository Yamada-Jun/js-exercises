
let proto = {
    // プロパティ名が数値のプロパティ を持つオブジェクトをプロトタイプとして持つ
    1: 2,
    // プロパティ名が文字列のプロパティ を持つオブジェクトをプロトタイプとして持つ
    "string": 3,
};

// 列挙可能なプロパティ を持つオブジェクトをプロトタイプとして持つ
Object.defineProperty(proto, "enum", {
    value: 0,
    enumerable: true
});


let object = Object.create(proto);


// プロパティ名が数値かつプロトタイプの数値プロパティと同名のプロパティ を持つ
object[1] = 300;

// プロパティ名が数値かつプロトタイプの数値プロパティと同名でないプロパティ を持つ
object[100] = 3;

// プロパティ名が文字列かつプロトタイプの文字列プロパティと同名のプロパティ を持つ
object["string"] = 40;

// プロパティ名が文字列かつプロトタイプの文字列プロパティと同名でないプロパティ を持つ
object["str"] = 5;

// 列挙不可かつプロトタイプの列挙可能プロパティと同名のプロパティ を持つ
Object.defineProperty(object, "enum", {
    value: 6,
    enumerable: false
});

// for/in ループで順番を確認
for (let p in object) {
    console.log(object[p]);
}
// 下記が出力される
// 300      プロパティ名が数値のものが先に列挙される、プロパティ名の数値の小さいものから先に列挙される
// 3        プロパティ名が数値のものが先に列挙される、プロパティ名の数値の小さいものから先に列挙される
// 40       プロトタイプの文字列プロパティと同名のプロパティが先に列挙される
// 5        プロトタイプの文字列プロパティと同名のプロパティが先に列挙される

// "enum"は列挙不可のため列挙されない。同名のプロトタイプのプロパティ(列挙可能)も列挙されない